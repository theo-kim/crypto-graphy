{
    "Comparison Operators" : { 
        "Equality" : {
            "operation" : "util.assign(std.EQ(0, 1, util.len(0)), 2)",
            "description": "Performs a check for equality on two integers, returns a 1 or 0",
            "label": "=",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Value 1"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Value 2"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number",
                        "label": "1 or 0"
                    }
                ]
            }
        },
        "Inequality" : {
            "operation" : "util.assign(std.NEQ(0, 1, util.len(0)), 2)",
            "description": "Performs a check for inequality on two integers, returns a 1 or 0",
            "label": "≠",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Value 1"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Value 2"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number",
                        "label": "1 or 0"
                    }
                ]
            }
        }
    },
    "Logic Gates" : {
        "XOR" : {
            "operation" : "std.XOR(0, 1, util.len(0), 2)",
            "description": "Performs an bitwise exclusive or on two integers.",
            "label": "⊕",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "OR" : {
            "operation" : "std.OR(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise or on two integers.",
            "label": "∨",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }            
        },
        "AND" : {
            "operation" : "std.AND(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise and on two integers.",
            "label": "∧",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "NOT" : {
            "operation" : "std.NOT(0, util.len(0), 1)",
            "description": "Performs a bitwise not (i.e. compliment) on one integer.",
            "label": "~",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "LSHIFT" : {
            "operation" : "std.LSHIFT(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise left shift (non-circular).",
            "label": "<<",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "RSHIFT" : {
            "operation" : "std.RSHIFT(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise right shift (non-circular).",
            "label": ">>",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "Bitwise ADD" : {
            "operation" : "std.ADD(0, 1, util.len(0), 2)",
            "description": "Performs an addition on two byte arrays, dropping any overflow bit.",
            "label": "b+",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        }
    },
    "Arithmetic Operators" : {
        "Addition" : {
            "operation" : "util.assign(util.ADD(0, 1), 2)",
            "description": "Performs an addition between two numbers.",
            "label": "+",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number"
                    }
                ]
            }
        },
        "Subtraction" : {
            "operation" : "util.assign(util.SUB(0, 1), 2)",
            "description": "Performs a subtraction between two numbers.",
            "label": "-",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number"
                    }
                ]
            }
        },
        "Division" : {
            "operation" : "util.assign(util.DIV(0, 1), 2)",
            "description": "Performs an integer division between two numbers (i.e. remainders are dropped)",
            "label": "÷",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number"
                    }
                ]
            }
        },
        "Multiplication" : {
            "operation" : "util.assign(util.MUL(0, 1), 2)",
            "description": "Performs a multiplication between two numbers",
            "label": "×",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number"
                    }
                ]
            }
        },
        "Modulo" : {
            "operation" : "util.assign(util.MOD(0, 1), 2)",
            "description": "Performs a modulo between two numbers (i.e. the remainder after an integer division between both inputs)",
            "label": "%",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number"
                    }
                ]
            }
        }
    },
    "Factoring" : {
        "Extended Euclidian GCD" : {
            "operation" : "util.egcd(0, 1, 2, 3, 4)",
            "description": "Hashes a variable length input into a 128-bit hash value.",
            "label": "eGCD",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "number",
                        "label": "A"
                    },
                    {
                        "side": "top",
                        "position": 3,
                        "format": "number",
                        "label": "B"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "number",
                        "label": "GCD"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "number",
                        "label": "x"
                    },
                    {
                        "side": "bottom",
                        "position": 3,
                        "format": "number",
                        "label": "y"
                    }
                ]
            }
        }
    },
    "Hashing" : {
        "MD5" : {
            "operation" : "crypto.MD5(0, util.len(0), 1)",
            "description": "Hashes a variable length input into a 128-bit hash value.",
            "label": "MD5",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "size": 16
                    }
                ]
            }
        },
        "SHA1" : {
            "operation" : "crypto.SHA1(0, util.len(0), 1)",
            "description": "Hashes a variable length input into a 160-bit hash value.",
            "label": "SHA1",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "size": 20
                    }
                ]
            }
        },
        "SHA256" : {
            "operation" : "crypto.SHA256(0, util.len(0), 1)",
            "description": "Hashes a variable length input into a 256-bit hash value.",
            "label": "SHA256",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "size": 32
                    }
                ]
            }
        }
    },
    "Pseudo-Randomness" : {
        "Pseudo-Random Generator" : {
            "operation" : "util.assign(util.PRG(0), 1)",
            "description": "Uses a random seed to generate a pseudo-random byte (8-bits). Not deterministic, running multiple times will yield different values",
            "label": "PRG",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int",
                        "label": "seed"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int",
                        "label": "Pseudo-random Value"
                    }
                ]
            }
        },
        "Pseudo-Random Function" : {
            "operation" : "util.assign(util.PRF(0, 1), 2)",
            "description": "Given a random key and a seed, produce a pseudo-random byte deterministically",
            "label": "PRF",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "key"
                    },
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int",
                        "label": "seed"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int",
                        "label": "value"
                    }
                ]
            }
        }
    },
    "Symmetric Encryption" : {
        "AES Encrypt" : {
            "operation" : "util.assign(util.aes_encrypt(0, 1, 2), 3)",
            "description": "Given an initialized mode of operation, produce an encrypted ciphertext for the given plaintext. Requires an AES mode of operation to be connected.",
            "label": "AES Enc",
            "format": {
                "size": [100, 100],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Plaintext"
                    },
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "enum-aes",
                        "label": "Mode of Operation"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Ciphertext",
                        "size": 256
                    },
                    {
                        "side": "right",
                        "position": 3,
                        "format": "number",
                        "label": "Ciphertext Length"
                    }
                ]
            }
        },
        "One Time Pad Encode" : {
            "operation" : "encrypt.XOR(0, 1, util.len(0), 2)",
            "description": "Given a random key, encrypt a plaintext using a uniform XOR. If the size of the key is not the same as the plaintext, zeros are filled.",
            "label": "OTP",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Plaintext"
                    },
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "bytearr",
                        "label": "Key"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Ciphertext"
                    }
                ]
            }
        }
    },
    "Symmetric Decryption" : {
        "AES Descrypt" : {
            "operation" : "util.assign(util.aes_decrypt(0, 1, 2), 3)",
            "description": "Given an initialized mode of operation (the same as used to encrypt the message), decrypt a ciphertext to the original plaintext message",
            "label": "AES Dec",
            "format": {
                "size": [100, 100],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Ciphertext"
                    },
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "enum-aes",
                        "label": "Mode of Operation"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Plaintext",
                        "size": 256
                    },
                    {
                        "side": "right",
                        "position": 3,
                        "format": "number",
                        "label": "Plaintext Length"
                    }
                ]
            }
        },
        "One Time Pad Decode" : {
            "operation" : "encrypt.XOR(0, 1, util.len(0), 2)",
            "description": "Given a random key, encrypt a plaintext using a uniform XOR. If the size of the key is not the same as the plaintext, zeros are filled.",
            "label": "OTP",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Ciphertext"
                    },
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "bytearr",
                        "label": "Key"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Plaintext"
                    }
                ]
            }
        }
    },
    "Block Cipher Operation Modes" : {
        "AES CBC" : {
            "operation" : "util.prepare_cbc(0, 1, 2)",
            "description": "Code Block Chaining mode of operation. Requires a 16-byte key and a 16-byte initialization vector",
            "label": "CBC",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "bytearr",
                        "label": "Initialization Vector",
                        "size": 16
                    },
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Key",
                        "size": 16
                    }
                ],
                "outputs" : [
                    {
                        "side": "top",
                        "position": 2,
                        "format": "enum-aes",
                        "label": "Operation Mode"
                    }
                ]
            }
        },
        "AES CTR" : {
            "operation" : "util.prepare_ctr(0, 1, 2)",
            "description": "Counter Mode of Operation. Requires a 16 byte key and an initial counter value",
            "label": "CTR",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "number",
                        "label": "Counter Initialization",
                        "default": 0
                    },
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Key",
                        "size": 16
                    }
                ],
                "outputs" : [
                    {
                        "side": "top",
                        "position": 2,
                        "format": "enum-aes",
                        "label": "Operation Mode"
                    }
                ]
            }
        },
        "AES ECB" : {
            "operation" : "util.prepare_ecb(0, 1)",
            "description": "Electronic Code Book Mode of Operation. Requires a 16 byte key. THIS IS NOT RECOMMENDED as it is the least secure mode of operation as it adds no randomness to the ciphertext",
            "label": "ECB",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr",
                        "label": "Key",
                        "size": 16
                    }
                ],
                "outputs" : [
                    {
                        "side": "top",
                        "position": 2,
                        "format": "enum-aes",
                        "label": "Operation Mode"
                    }
                ]
            }
        }
    }
}