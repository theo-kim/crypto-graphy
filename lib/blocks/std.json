{
    "Comparison Operators" : { 
        "Equality" : {
            "operation" : "std.EQ(0, 1, util.len(0))",
            "description": "Performs a check for equality on two integers, returns a 1 or 0",
            "label": "=",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "Inequality" : {
            "operation" : "std.NEQ(0, 1, util.len(0))",
            "description": "Performs a check for inequality on two integers, returns a 1 or 0",
            "label": "≠",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        }
    },
    "Logic Gates" : {
        "XOR" : {
            "operation" : "std.XOR(0, 1, util.len(0), 2)",
            "description": "Performs an bitwise exclusive or on two integers.",
            "label": "⊕",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "OR" : {
            "operation" : "std.OR(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise or on two integers.",
            "label": "∨",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }            
        },
        "AND" : {
            "operation" : "std.AND(0, 1, util.len(0), 2)",
            "description": "Performs a bitwise and on two integers.",
            "label": "∧",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "bytearr"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        },
        "NOT" : {
            "operation" : "std.NOT(0, util.len(0), 1)",
            "description": "Performs a bitwise not (i.e. compliment) on one integer.",
            "label": "~",
            "format": {
                "size": [ 50, 50 ],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "bytearr"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "bytearr"
                    }
                ]
            }
        }
    },
    "Arithmetic Operators" : {
        "ADD" : {
            "operation" : "std.ADD(0, 1)",
            "description": "Performs an addition on two integers, dropping any overflow bit.",
            "label": "+",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        },
        "SUB" : {
            "operation" : "std.SUB(0, 1)",
            "description": "Performs a subtraction on two integers, dropping any overflow bit.",
            "label": "-",
            "format": {
                "size": [50, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "bottom",
                        "position": 1,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        }
    },
    "Hashing" : {
        "MD5" : {
            "operation" : "crypto.MD5(0)",
            "description": "Hashes a variable length input into a 128-bit hash value.",
            "label": "MD5",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        },
        "SHA1" : {
            "operation" : "crypto.SHA1(0)",
            "description": "Hashes a variable length input into a 160-bit hash value.",
            "label": "SHA1",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        },
        "SHA256" : {
            "operation" : "crypto.SHA256(0)",
            "description": "Hashes a variable length input into a 256-bit hash value.",
            "label": "SHA256",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        }
    },
    "Pseudo-Randomness" : {
        "Psuedo-Random Generator" : {
            "operation" : "std.loop(crypto.PRG(0), 1)",
            "description": "Uses a random seed to generate a deterministic sequence of pseudo-random numbers",
            "label": "PRG",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        },
        "Pseudo-Random Function" : {
            "operation" : "crypto.PRF(0, 1)",
            "description": "Given a random key and an initialization value, produce a pseudo-random value of size X",
            "label": "PRF",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        },
        "Pseudo-Random Permutation" : {
            "operation" : "crypto.PRP(0, 1)",
            "description": "Given a random key and an initialization value, produce a pseudo-random value of size X which is 1-to-1 mapped with the initialization value",
            "label": "PRP",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        }
    },
    "Symmetric Encryption" : {
        "AES" : {
            "operation" : "encrypt.AES(0, 1)",
            "description": "Given a random key and an initialization value, produce a pseudo-random value of size X which is 1-to-1 mapped with the initialization value",
            "label": "AES",
            "format": {
                "size": [100, 100],
                "inputs": [
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int"
                    },
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "left",
                        "position": 3,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 2,
                        "format": "int"
                    }
                ]
            }
        },
        "DES" : {
            "operation" : "encrypt.DES(0, 1)",
            "description": "Given a random key and an initialization value, produce a pseudo-random value of size X which is 1-to-1 mapped with the initialization value",
            "label": "DES",
            "format": {
                "size": [100, 100],
                "inputs": [
                    {
                        "side": "left",
                        "position": 1,
                        "format": "int"
                    },
                    {
                        "side": "left",
                        "position": 3,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 2,
                        "format": "int"
                    }
                ]
            }
        },
        "One Time Pad" : {
            "operation" : "encrypt.OTP(0, 1)",
            "description": "Given a random key and an initialization value, produce a pseudo-random value of size X which is 1-to-1 mapped with the initialization value",
            "label": "OTP",
            "format": {
                "size": [100, 50],
                "inputs": [
                    {
                        "side": "top",
                        "position": 2,
                        "format": "int"
                    },
                    {
                        "side": "bottom",
                        "position": 2,
                        "format": "int"
                    }
                ],
                "outputs" : [
                    {
                        "side": "right",
                        "position": 1,
                        "format": "int"
                    }
                ]
            }
        }
    }
}